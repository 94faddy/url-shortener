import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// Embed ‡∏à‡∏≤‡∏Å next.config.ts ‡∏ú‡πà‡∏≤‡∏ô env
const rawHosts = process.env.ALLOWED_HOSTS || ''
const ALLOWED_HOSTNAMES = rawHosts.split(',').map(h => h.trim().toLowerCase())

export function middleware(request: NextRequest) {
  const hostHeader = request.headers.get('host') || ''
  const hostname = hostHeader.split(':')[0].toLowerCase()

  // Debug log (‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÉ‡∏ô console ‡∏Ç‡∏ì‡∏∞‡∏£‡∏±‡∏ô build/start)
  console.log('üåê Host Header:', hostHeader)
  console.log('üîç Extracted Hostname:', hostname)
  console.log('‚úÖ Allowed Hostnames:', ALLOWED_HOSTNAMES)

  // ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤ hostname ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  if (!ALLOWED_HOSTNAMES.includes(hostname)) {
    return new NextResponse('‚ùå Access denied by domain policy.', { status: 403 })
  }

  return NextResponse.next()
}

// ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å route (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô static/API)
export const config = {
  matcher: ['/', '/((?!_next|favicon.ico|api|static).*)'],
}
